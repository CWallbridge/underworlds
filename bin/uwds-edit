#!/usr/bin/env python
#-*- coding: UTF-8 -*-

import re
import os
import sys
import underworlds
import math
from underworlds.helpers import transformations
from underworlds.types import *
from underworlds.tools.loader import ModelLoader
from underworlds.tools.primitives_3d import Box
from underworlds.tools.edit import *

import logging; logger = logging.getLogger("underworlds.uwds-edit")
logging.basicConfig(level=logging.INFO)

if __name__ == "__main__":

    import argparse
    parser = argparse.ArgumentParser(description="Manipulates underworlds worlds from the command-line." \
                                                 "Type uwds-edit <sub-command> --help for detailed help.")

    subparsers = parser.add_subparsers()

    commands = {}

    parent = subparsers.add_parser("parent", help="re-parent a node")
    parent.set_defaults(which="editor", cmd="parent")
    parent.add_argument("world", help="world to edit")
    parent.add_argument("node",help="ID of the node to re-parent")
    parent.add_argument("parent",help="ID of the new parent")
    commands["parent"] = parent

    add_mesh_node = subparsers.add_parser("add-mesh-node", help="creates a new mesh node")
    add_mesh_node.set_defaults(which="adder", cmd="add-mesh-node")
    add_mesh_node.add_argument("world", help="world to edit")
    add_mesh_node.add_argument("name",help="name of the new node to add")
    add_mesh_node.add_argument("mesh",help="ID of the Mesh to be added")
    add_mesh_node.add_argument("-p","--parent",default="root",help="ID of the new node's parent (default to root)")
    commands["add-mesh-node"] = add_mesh_node
    
    add_entity_node = subparsers.add_parser("add-entity-node", help="creates a new entity node")
    add_entity_node.set_defaults(which="adder", cmd="add-entity-node")
    add_entity_node.add_argument("world", help="world to edit")
    add_entity_node.add_argument("name",help="name of the new node to add")
    add_entity_node.add_argument("-p","--parent",default="root",help="ID of the new node's parent (default to root)")
    commands["add-entity-node"] = add_entity_node
    
    add_camera_node = subparsers.add_parser("add-camera-node", help="creates a new camera node")
    add_camera_node.set_defaults(which="adder", cmd="add-camera-node")
    add_camera_node.add_argument("world", help="world to edit")
    add_camera_node.add_argument("name",help="name of the new node to add")
    add_camera_node.add_argument("aspect",default=0,help="aspect of the camera")
    add_camera_node.add_argument("hfov",default=0,help="horizontal field of view for camera")
    add_camera_node.add_argument("-p","--parent",default="root",help="ID of the new node's parent (default to root)")
    commands["add-camera-node"] = add_camera_node

    rm_node = subparsers.add_parser("rm-node", help="remove a node")
    rm_node.set_defaults(which="remover", cmd="rm-node")
    rm_node.add_argument("world", help="world to edit")
    rm_node.add_argument("node",help="ID of the node to remove")
    commands["rm-node"] = rm_node

    add_mesh = subparsers.add_parser("add-mesh", help="load meshes to a world to subsequently add to a node")
    add_mesh.set_defaults(which="adder", cmd="add-mesh")
    add_mesh.add_argument("world", help="world to add mesh to")
    add_mesh.add_argument("model",help="path to the 3D model to load (all the meshes are appended to the node). Alternatively, 'box_<x>_<y>_<z>' to add a box of the given size in [m]")
    add_mesh.add_argument("-n","--node",default=None,help="add a node id here to directly add the mesh to a node")
    commands["add-mesh"] = add_mesh
    
    add_mesh_to_node_cmd = subparsers.add_parser("add-mesh-to-node", help="adds a mesh that has already been loaded to the world to a node")
    add_mesh_to_node_cmd.set_defaults(which="adder", cmd="add-mesh-to-node")
    add_mesh_to_node_cmd.add_argument("world", help="world to edit")
    add_mesh_to_node_cmd.add_argument("node",help="node to add the mesh to")
    add_mesh_to_node_cmd.add_argument("mesh",help="ID of the mesh being added to the node")
    commands["add-mesh-to-node"] = add_mesh_to_node_cmd

    rm_mesh = subparsers.add_parser("rm-mesh", help="clear a mesh from a mesh node, if all meshes are removed then remove the node")
    rm_mesh.set_defaults(which="remover", cmd="rm-mesh")
    rm_mesh.add_argument("world", help="world to edit")
    rm_mesh.add_argument("node",help="ID of the node to edit")
    rm_mesh.add_argument("mesh",help="ID of the mesh to be removed")
    commands["rm-mesh"] = rm_mesh

    transform = subparsers.add_parser("transform", help="set the transform of a node")
    transform.set_defaults(which="editor", cmd="transform")
    transform.add_argument("world", help="world to edit")
    transform.add_argument("node",help="ID of the node to edit")
    transform.add_argument("transform",help="desired transform, as <x>_<y>_<z>_<rx>_<ry>_<rz> (in meters & rad)")
    commands["transform"] = transform

    args = parser.parse_args()

    cmd = None
    if args.cmd in commands:
        cmd = commands[args.cmd]

    ############################################################
    ### ADD NODE
    ############################################################
    if args.cmd == "add-mesh-node":
        
        create_mesh_node(args.world, args.name, [args.mesh], args.parent)

        sys.exit(0)

    elif args.cmd == "add-entity-node":
        create_entity_node(args.world, args.name, args.parent)
        
        sys.exit(0)
        
    elif args.cmd == "add-camera-node":
        create_camera_node(args.world, args.name, args.aspect, args.hfov, args.parent)
        
        sys.exit(0)

    ############################################################
    ### ADD MESH
    ############################################################
    elif args.cmd == "add-mesh":
        sizes = []
        if args.model.startswith("box_"):
            for size in args.model.split("_")[1:]:
                sizes.append(float(size))
            mesh_id = create_box_mesh(args.world, sizes[0], sizes[1], sizes[2])
        else:
            mesh_id = load_mesh(args.world, args.model)
            
        logger.info("Created mesh with id %s" % str(mesh_id))
        
        if args.node is not None:
            logger.info("Attempting to add mesh %s to world %s node %s" % (str(mesh_id),str(args.world),str(args.node)))
            add_mesh_to_node(args.world, args.node, mesh_id)
            
    ############################################################
    ### ADD MESH TO NODE
    ############################################################
    elif args.cmd == "add-mesh-to-node":
        add_mesh_to_node(args.world, args.node, [args.mesh])

    ############################################################
    ### REMOVE MESH
    ############################################################
    elif args.cmd == "rm-mesh":
        remove_mesh(args.world, args.node, args.mesh)

    ############################################################
    ### REMOVE NODE
    ############################################################
    elif args.cmd == "rm-node":
        remove_node(args.world, args.node)

    ############################################################
    ### PARENT
    ############################################################
    elif args.cmd == "parent":
        set_parent(args.world, args.node, args.parent)

    ############################################################
    ### TRANSFORM
    ############################################################
    elif args.cmd == "transform":
        axis = {}
        axis["x"] = numpy.array([1.0, 0.0, 0.0])
        axis["y"] = numpy.array([0.0, 1.0, 0.0])
        axis["z"] = numpy.array([0.0, 0.0, 1.0])
        values = []
        x,y,z,rx,ry,rz = [float(i) for i in args.transform.split("_")]
        #rx = transformations.rotation_matrix(math.radians(values[3]),axis['x'],None)
        #ry = transformations.rotation_matrix(math.radians(values[4]),axis['y'],None)
        #rz = transformations.rotation_matrix(math.radians(values[5]),axis['z'],None)
        r = transformations.euler_matrix(rx, rz, ry, 'rxyz')
        t = transformations.translation_matrix((x,y,z))
        new_node = node
        new_node.transformation = transformations.concatenate_matrices(t,r)
        target_world.scene.nodes.update(new_node)

    ############################################################
    ### UNKNOWN :-(
    ############################################################
    else:
        logger.error("Unknown command.")
        sys.exit(1)
